import express from "express";
import next from "next";
import log4js from "log4js";
import cookieParser from "cookie-parser";
import bodyParser from "body-parser";

import WalletsRoutes from "../routes/walletsRoutes.js";
import TransactionsDataRoutes from "../routes/transactionsDataRoutes.js";
import EncryptedIpsRoutes from "../routes/encryptedIpsRoutes.js";
import AddressesDataRoutes from "../routes/addressesDataRoutes.js";
import FiatRatesRoutes from "../routes/fiatRatesRoutes.js";
import NotificationsRoutes from "../routes/notificationsRoutes.js";
import EmailsRoutes from "../routes/emailsRoutes.js";
import FiatPaymentsRoutes from "../routes/fiatPaymentsRoutes.js";
import EncryptedWalletPaymentIdsRoutes from "../routes/encryptedWalletPaymentIdsRoutes.js";
import WebhookRoutes from "../routes/webhookRoutes.js";
import ClientLogsRoutes from "../routes/clentLogsRoutes.js";
import { SERVER_PORT } from "../properties.js";
import { setupApiKeysProxying } from "./setupApiKeysProxying.js";
import { apiVersionPrefix, onlyIfDoesntStartWith } from "../controllers/controllerUtils.js";
import nextConfig from "../../next.config.mjs";

const log = log4js.getLogger("server");

/* Base internal path just to semantically separate the swaps stuff from other backend endpoints. */
export const baseInternalSwapsPath = nextConfig.basePath;

export function configureAndStartServer() {
    const apiKeysProxyBasePath = `${apiVersionPrefix}/proxy`;
    const nextApp = next({
        dev: process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "prod",
    });
    const nextFilesHandler = nextApp.getRequestHandler();
    nextApp.prepare().then(() => {
        const app = express();

        app.all(`^${baseInternalSwapsPath}([/?#].*)?*$`, (req, res) => {
            // handle the statics generated by NEXT.js
            return nextFilesHandler(req, res);
        });

        app.use(log4js.connectLogger(log4js.getLogger("http"), { level: "auto" }));
        app.use(cookieParser());
        app.use(onlyIfDoesntStartWith(apiKeysProxyBasePath, bodyParser.text({ limit: "10mb" }))); // for parsing text/plain
        app.use(onlyIfDoesntStartWith(apiKeysProxyBasePath, bodyParser.json({ limit: "1mb" }))); // for parsing application/json
        app.use(onlyIfDoesntStartWith(apiKeysProxyBasePath, bodyParser.urlencoded({ extended: true, limit: "100kb" }))); // for parsing application/x-www-Form-urlencoded
        app.use(WalletsRoutes);
        app.use(TransactionsDataRoutes);
        app.use(EncryptedIpsRoutes);
        app.use(AddressesDataRoutes);
        app.use(FiatRatesRoutes);
        app.use(NotificationsRoutes);
        app.use(EmailsRoutes);
        app.use(FiatPaymentsRoutes);
        app.use(EncryptedWalletPaymentIdsRoutes);
        app.use(WebhookRoutes);
        app.use(ClientLogsRoutes);

        setupApiKeysProxying(apiKeysProxyBasePath).map(i => app.use(i.path, i.middleware));

        app.listen(SERVER_PORT, () => {
            log.info(`Listening on ${SERVER_PORT}..., Node PID=${process.pid}`);
        });
    });
}
